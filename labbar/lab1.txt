TDTS04

Matteus Laurent		matla782
Oscar Petersson		oscpe262

====================
1 Is your browser running HTTP version 1.0 or 1.1? What version of HTTP is the server running?
====================

Request Version: HTTP/1.1
=> Browser running HTTP/1.1
Response Phrase: OK
=> Server running HTTP/1.1

====================
2 What languages (if any) does your browser indicate that it can accept to the server? In the captured session, what other information (if any) does the browser provide the server with regarding the user/browser?
====================

Languages: en-us and en 
Other info: Browser version, accepted document types, charsets, and encodings, and time allowed to keep connection alive.

====================
3 What is the IP address of your computer? Of the gaia.cs.umass.edu server?
====================

local: 192.168.1.102 (GET Source)
remote: 128.119.245.12 (GET Destination)

====================
4 What is the status code returned from the server to your browser?
====================

Status Code: 200
(i.e. "OK")

====================
5 When was the HTML file that you are retrieving last modified at the server?
====================

Last-Modified: Tue, 23 Sep 2003 05:29:00 GMT

====================
6 How many bytes of content are being returned to your browser?
====================

Content-Length: 73

====================
7 By inspecting the raw data in the "packet bytes" pane, do you see any http headers within the data that are not displayed in the "packet details" pane? If so, name one.
====================

Nope, not in current version of Wireshark at least.

====================
Task A: 
====================

The HTTP request/response interaction between the end systems is built on messages containing request|status line, header lines and an entity body. 
The r|s line holds the specific request/status (i.e. GET <this>, <Status integer><Basic status description>).
The header lines hold broader information regarding how the client/server are allowed to interact with each other (time stamps, conditions regarding caching, connection timeout intervalls, encodings, etc.), and the entity body is used for content transfer.

====================
8 Inspect the contents of the first HTTP GET request from your browser to the server. Do you see an “IF-MODIFIED-SINCE” line in the HTTP GET?
====================

Nope

====================
9 Inspect the contents of the server response. Did the server explicitly return the contents of the file? How can you tell?
====================

Yes, based on the status code (200), and the text data itself.

====================
10 Now inspect the contents of the second HTTP GET request from your browser to the server. Do you see an “IF-MODIFIED-SINCE:” line in the HTTP GET? If so, what information follows the “IF-MODIFIED-SINCE:” header?
====================

Yes
If-Modified-Since: Tue, 23 Sep 2003 05:35:00 GMT

====================
11 What is the HTTP status code and phrase returned from the server in response to this second HTTP GET? Did the server explicitly return the contents of the file? Explain.
====================

304 (Not Modified). No explicit return of contents since the object has not been modified since "If-Modified-Since".

====================
Task B: 
====================

The first time a page is fetched, the page is returned along with a "Last-Modified" time stamp. Further fetching of the page a comparison  is made between "Last-Modified" and "IF-MODIFIED-SINCE" to decide if the entire page should be returned anew (SC 200) or if the locally cached page should be used (SC 304).

====================
12 How many HTTP GET request messages were sent by your browser?
====================

One (1)

====================
13 How many data-containing TCP segments were needed to carry the single HTTP response?
====================

Four (4) data-containing segments.

====================
14 What is the status code and phrase associated with the response to the HTTP GET request?
====================

200 OK

====================
15 Is there any HTTP header information in the transmitted data associated with TCP segmentation? For this question you may want to think about at what layer each protocol operates, and how the protocols at the different layers interoperate.
====================

No. The segmentation is in this case done on ethernet level, where the MTU (maximal transmission unit) is 1500 B (plus header), and subsequently the next layers fill the ethernet packets' capacity accordingly.

====================
Task C: 
====================

Communication between end systems take place in different layers. The HTTP messages are encapsulated in TCP packets, which in turn are encapsulated in IP packets, which are encapsulated in Ethernet packets, which finally are transferred in frames as bytes on wire. Each of these "containers" have limits in size with Ethernet having the smallest MTU of the ones mentioned. Larger amount of data is subsequently in need of being segmented to fit into the Ethernet container. 

====================
16 How many HTTP GET request messages were sent by your browser? To which Internet addresses were these GET requests sent?
====================

3 GET request messages, 128.119.245.12 (html), 165.193.123.218 (gif), 134.241.6.82 (jpg)

====================
17 Can you tell whether your browser downloaded the two images serially, or whether they were downloaded from the two web sites in parallel? Explain.
====================

Though the transfer of the .jpg began first once the .gif was done, the request were done without consideration to whether the previous was finished. Hence, if the response time and transfer time had been short and long enough, the two would have been downloaded in parallel.

====================
Task D: 
====================

Initially, the browser simply requests a certain .html-file from the first server. The http-request is granted, and the .html file is transmitted in the data contents. While reading the file to display, 2 additional embedded objects are discovered. In automatic response, the browser establishes connections with the new servers and sends requests  for retrieval of these respective objects. It seems appearant that these requests happen in parallel and that the transfer of data packets need not be serial either.

====================
20 What does the "Connection: close" and "Connection: Keep-alive" header field imply in HTTP protocol? When should one be used over the other?
====================

What does the "Connection: close" and "Connection: Keep-alive" header field imply in HTTP protocol? When should one be used over the other?
"C: close" is telling the server to close the connection after sending the requested object, whereas "C: Keep-alive" keeps the connection open for further requests without having to reallocate TCP buffers and variables. Similarly, if the server sends "C: close", it tells the client that it will close the connection after sending the requested item.

Keeping the connection alive is more suitable where, for instace, multiple webpages and objects resides on the same server, leading to multiple requests in succession/over a brief timespan. It's a good idea to close connections, especially from the server's perspective, if it needs to handle many single requests from different sources.

====================
Task E: 
====================

Understanding the needs of the clients and the demands on the server lets us better choose how a server handles connections by default to meet delay/performance expectations.

